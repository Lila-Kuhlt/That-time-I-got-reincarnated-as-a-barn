[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float width : hint_range(0.0, 1.0) = 1.0;

bool hasNeigh(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset = width - abs(x);
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == false) {
				return true;
			}
		}
	}
	return false;
}

void fragment() {
	COLOR = texture(TEXTURE, UV);
	
	if (COLOR.a <= 0.0 && hasNeigh(UV, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[resource]
shader = SubResource( 3 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 1.0
